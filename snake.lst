Microsoft (R) Macro Assembler Version 6.11		    06/24/20 22:55:13
tempfile.asm						     Page 1 - 1


				clearScreen macro
					;25*80分辨率
					mov ah,00h
					mov al,03h
					int 10h
					endm
				print macro p1,p2
					mov al,80
					mul bh
					xor bh,bh
					shl bl,1
					add ax,bx
					
					push si
					mov si,ax
					shl si,1
					mov es:[si],p1
					mov es:[si+1],p2
					mov es:[si+2],p1
					mov es:[si+3],p2
					pop si
					endm

				printone macro p1,p2
					mov al,80
					mul bh
					xor bh,bh
					shl bl,1
					add ax,bx
					
					push si
					mov si,ax
					shl si,1
					mov es:[si],p1
					mov es:[si+1],p2
					mov es:[si+2],p1
					mov es:[si+3],p2
					pop si
					endm
				printBody macro p1,color
					 mov ax,ds:[p1]
					 mov dl,' '
					 mov dh,color
					 mov bl,al
					 mov bh,ah
					 print dl,dh
					endm
				setRowBackground macro p1,p2,p3,p4,p5,p6
					mov dl,p1
					mov dh,p2
					mov bl,p3
					mov bh,p4
					mov cx,p5
				drawRow:
					push cx
					push bx
					print dl,dh
					pop bx
					push bx
					add bh,p6
					print dl,dh
					pop bx
					inc bl
					pop cx
					loop drawRow
					endm
				setColBackground macro p1,p2,p3,p4,p5,p6
					mov dl,p1
					mov dh,p2
					mov bl,p3
					mov bh,p4
					mov cx,p5
				drawCol:
					push cx
					push bx
					print dl,dh
					pop bx
					push bx
					add bl,p6
					print dl,dh
					pop bx
					inc bh
					pop cx
					loop drawCol
					endm
					
				.model small
 0000				.data
 0000 4D00				snake_direction dw 4d00h
 0002  0190 [				snake_body dw 400 dup(0)
        0000
       ]
 0322 0000				food_position dw 0
 0324 0004				snake_length dw 4
 0326 0000				score dw 0
 = 0077					white equ 01110111b
 = 0055					pink equ 01010101b
 = 0044					red	equ 01000100b
 = 0066					yellow equ 01100110b
 = 0033					grren equ 00110011b
 = 0011					blue equ 00010001b
 = 0000					black equ 00000000b
 = 0033					greenplus equ 00110011b
 = 4800					up	equ	4800h
 = 5000					down equ 5000h
 = 4B00					left equ 4b00h
 = 4D00					right equ 4d00h
 = 0019					nscore equ 25
 = 001A					score_position equ 26
 0328 0001				jblink dw 1
 032A 0000				gameover dw 0
 0000				.code
 0000				start:
 0000				main proc far
 0000  B8 B800				mov ax,0b800h
 0003  8E C0				mov es,ax	;直接写屏
					
 0005  BE 0002				mov si,2	;定位到body 初始化蛇
 0008  B9 0004				mov cx,4

					
					clearScreen
 000B  B4 00		     1		mov ah,00h
 000D  B0 03		     1		mov al,03h
 000F  CD 10		     1		int 10h
					;设置地图上下边界
					setRowBackground ' ',white,0,0,30,20
 0011  B2 20		     1		mov dl,' '
 0013  B6 77		     1		mov dh,white
 0015  B3 00		     1		mov bl,0
 0017  B7 00		     1		mov bh,0
 0019  B9 001E		     1		mov cx,30
 001C			     1	drawRow:
 001C  51		     1		push cx
 001D  53		     1		push bx
 001E  B0 50		     2		mov al,80
 0020  F6 E7		     2		mul bh
 0022  32 FF		     2		xor bh,bh
 0024  D0 E3		     2		shl bl,1
 0026  03 C3		     2		add ax,bx
 0028  56		     2		push si
 0029  8B F0		     2		mov si,ax
 002B  D1 E6		     2		shl si,1
 002D  26: 88 14	     2		mov es:[si],dl
 0030  26: 88 74 01	     2		mov es:[si+1],dh
 0034  26: 88 54 02	     2		mov es:[si+2],dl
 0038  26: 88 74 03	     2		mov es:[si+3],dh
 003C  5E		     2		pop si
 003D  5B		     1		pop bx
 003E  53		     1		push bx
 003F  80 C7 14		     1		add bh,20
 0042  B0 50		     2		mov al,80
 0044  F6 E7		     2		mul bh
 0046  32 FF		     2		xor bh,bh
 0048  D0 E3		     2		shl bl,1
 004A  03 C3		     2		add ax,bx
 004C  56		     2		push si
 004D  8B F0		     2		mov si,ax
 004F  D1 E6		     2		shl si,1
 0051  26: 88 14	     2		mov es:[si],dl
 0054  26: 88 74 01	     2		mov es:[si+1],dh
 0058  26: 88 54 02	     2		mov es:[si+2],dl
 005C  26: 88 74 03	     2		mov es:[si+3],dh
 0060  5E		     2		pop si
 0061  5B		     1		pop bx
 0062  FE C3		     1		inc bl
 0064  59		     1		pop cx
 0065  E2 B5		     1		loop drawRow
					;设置地图左右边界
					setColBackground ' ',white,0,0,21,30
 0067  B2 20		     1		mov dl,' '
 0069  B6 77		     1		mov dh,white
 006B  B3 00		     1		mov bl,0
 006D  B7 00		     1		mov bh,0
 006F  B9 0015		     1		mov cx,21
 0072			     1	drawCol:
 0072  51		     1		push cx
 0073  53		     1		push bx
 0074  B0 50		     2		mov al,80
 0076  F6 E7		     2		mul bh
 0078  32 FF		     2		xor bh,bh
 007A  D0 E3		     2		shl bl,1
 007C  03 C3		     2		add ax,bx
 007E  56		     2		push si
 007F  8B F0		     2		mov si,ax
 0081  D1 E6		     2		shl si,1
 0083  26: 88 14	     2		mov es:[si],dl
 0086  26: 88 74 01	     2		mov es:[si+1],dh
 008A  26: 88 54 02	     2		mov es:[si+2],dl
 008E  26: 88 74 03	     2		mov es:[si+3],dh
 0092  5E		     2		pop si
 0093  5B		     1		pop bx
 0094  53		     1		push bx
 0095  80 C3 1E		     1		add bl,30
 0098  B0 50		     2		mov al,80
 009A  F6 E7		     2		mul bh
 009C  32 FF		     2		xor bh,bh
 009E  D0 E3		     2		shl bl,1
 00A0  03 C3		     2		add ax,bx
 00A2  56		     2		push si
 00A3  8B F0		     2		mov si,ax
 00A5  D1 E6		     2		shl si,1
 00A7  26: 88 14	     2		mov es:[si],dl
 00AA  26: 88 74 01	     2		mov es:[si+1],dh
 00AE  26: 88 54 02	     2		mov es:[si+2],dl
 00B2  26: 88 74 03	     2		mov es:[si+3],dh
 00B6  5E		     2		pop si
 00B7  5B		     1		pop bx
 00B8  FE C7		     1		inc bh
 00BA  59		     1		pop cx
 00BB  E2 B5		     1		loop drawCol
					
					
 00BD  E8 0011				call showScore
 00C0  E8 019D				call delay	
 00C3  E8 0069				call initSnake
 00C6  B9 0005				mov cx,5
 00C9				l0:
 00C9  E8 00AF				call moveSnake
 00CC  E8 0191				call delay
 00CF  E2 F8				loop l0
 00D1				main endp
 00D1				showScore proc near
 00D1  50				 push ax
 00D2  53				 push bx
 00D3  51				 push cx
 00D4  52				 push dx
 00D5  56				 push si
 00D6  57				 push di
 00D7  B6 07				 mov dh,07h
 00D9  B9 0007				 mov cx,7
 00DC  BE 007D				 mov si,125	;(80*0+52)*2+1
 00DF				setColorForScore:
 00DF  26: 88 34			 mov es:[si],dh
 00E2  83 C6 02				 add si,2
 00E5  E2 F8				 loop setColorForScore
 00E7				setScoreFont:
 00E7  26: C6 06 007E 73		 mov byte ptr es:[126],'s'
 00ED  26: C6 06 0080 63		 mov byte ptr es:[128],'c'
 00F3  26: C6 06 0082 6F		 mov byte ptr es:[130],'o'
 00F9  26: C6 06 0084 72		 mov byte ptr es:[132],'r'
 00FF  26: C6 06 0086 65		 mov byte ptr es:[134],'e'
 0105  26: C6 06 0088 3A		 mov byte ptr es:[136],':'
 010B				setScore: 
 010B  A1 0326 R			 mov ax,score
 010E  33 C9				 xor cx,cx
 0110  B9 0005				 mov cx,5
 0113  BE 0094				 mov si,148
 0116  BF 000A				 mov di,10
 0119					 lset:
 0119  33 D2				 	xor dx,dx
 011B  F7 F7				 	div di
 011D  80 C2 30				 	add dl,30h
 0120  26: 88 14			 	mov byte ptr es:[si],dl
 0123  83 EE 02				 	sub si,2
 0126  E2 F1				 	loop lset
 0128  5F				 pop di
 0129  5E				 pop si
 012A  5A				 pop dx
 012B  59				 pop cx
 012C  5B				 pop bx
 012D  58				 pop ax
 012E  C3				 ret 
 012F				showScore endp
 012F				initSnake proc near
 012F  50				 push ax
 0130  53				 push bx
 0131  51				 push cx
 0132  52				 push dx
 0133  56				 push si
 0134  57				 push di
 0135  B8 0E0C				 mov ax,0E0cH
 0138				init:
 0138  89 05				 mov ds:[di],ax
 013A  83 C7 02				 add di,2
 013D  FE C0				 inc al
 013F  E2 F7				 loop init		 
 0141  BF 0002				 mov di,2
 0144				initBody:
					;四段身子
 0144  B9 0004				 mov cx,4
 0147				printSnake:
					 
 0147  8B 05				 mov ax,ds:[di]
 0149  B2 07				 mov dl,07h
 014B  B6 33				 mov dh,greenplus
 014D  8A D8				 mov bl,al
 014F  8A FC				 mov bh,ah
					 printone dl,dh
 0151  B0 50		     1		mov al,80
 0153  F6 E7		     1		mul bh
 0155  32 FF		     1		xor bh,bh
 0157  D0 E3		     1		shl bl,1
 0159  03 C3		     1		add ax,bx
 015B  56		     1		push si
 015C  8B F0		     1		mov si,ax
 015E  D1 E6		     1		shl si,1
 0160  26: 88 14	     1		mov es:[si],dl
 0163  26: 88 74 01	     1		mov es:[si+1],dh
 0167  26: 88 54 02	     1		mov es:[si+2],dl
 016B  26: 88 74 03	     1		mov es:[si+3],dh
 016F  5E		     1		pop si
 0170  47				 inc di
 0171  47				 inc di
 0172  E2 D3				 loop printSnake
					;四段身子初始化结束
 0174  5F				 pop di
 0175  5E				 pop si
 0176  5A				 pop dx
 0177  59				 pop cx
 0178  5B				 pop bx
 0179  58				 pop ax
 017A  C3				 ret
 017B				initSnake endp

 017B				movesnake proc near
 017B  50				push ax
 017C  53				push bx
 017D  51				push cx
 017E  52				push dx
 017F  56				push si
 0180  57				push di

 0181  A1 0000 R			mov ax,snake_direction

 0184  8B 3E 0324 R			mov di,snake_length
 0188  83 EF 02				sub di,2
					
 018B  3D 4D00				cmp ax,right
 018E  74 00				je move_r
 0190				move_r:
 0190  8B 05				mov ax,ds:[di]
 0192  04 01				add al,1
 0194  EB 00				jmp judgePlug
					
 0196				judgePlug:
 0196  50				push ax
 0197  80 FC 00				cmp ah,0
 019A  75 03 E9 00BA			je gameend
 019F  80 FC 15				cmp ah,21
 01A2  75 03 E9 00B2			je gameend
 01A7  3C 00				cmp al,0
 01A9  75 03 E9 00AB			je gameend
 01AE  3C 1E				cmp al,30
 01B0  75 03 E9 00A4			je gameend
					
 01B5  8B 0E 0324 R			mov cx,snake_length
 01B9  83 E9 06				sub cx,6
 01BC  BF 0002				mov di,2
 01BF  D1 E9				shr cx,1
					
 01C1				s0:
 01C1  8B 1D				mov bx,ds:[di]
 01C3  3B D8				cmp bx,ax
 01C5  75 03 E9 008F			je gameend
					
 01CA  83 C7 02				add di,2
 01CD  E2 F2				loop s0
					
 01CF  58				pop ax
 01D0				update:
 01D0  8B 0E 0324 R			mov cx,snake_length
 01D4  83 E9 06				sub cx,6
 01D7  BF 0002				mov di,2
 01DA  D1 E9				shr cx,1
 01DC  50				push ax
					
 01DD  B2 20				mov dl,' '
 01DF  B6 00				mov dh,black
 01E1  8B 1D				mov bx,ds:[di]
					print dl,dh
 01E3  B0 50		     1		mov al,80
 01E5  F6 E7		     1		mul bh
 01E7  32 FF		     1		xor bh,bh
 01E9  D0 E3		     1		shl bl,1
 01EB  03 C3		     1		add ax,bx
 01ED  56		     1		push si
 01EE  8B F0		     1		mov si,ax
 01F0  D1 E6		     1		shl si,1
 01F2  26: 88 14	     1		mov es:[si],dl
 01F5  26: 88 74 01	     1		mov es:[si+1],dh
 01F9  26: 88 54 02	     1		mov es:[si+2],dl
 01FD  26: 88 74 03	     1		mov es:[si+3],dh
 0201  5E		     1		pop si
					
 0202				s5:
 0202  8B 55 02				mov dx,ds:[di+2]
 0205  89 15				mov ds:[di],dx
 0207  83 C7 02				add di,2
 020A  E2 F6				loop s5
					
 020C  B2 20				mov dl,' '
 020E  B6 71				mov dh,71h
 0210  8B 1D				mov bx,ds:[di]
					print dl,dh
 0212  B0 50		     1		mov al,80
 0214  F6 E7		     1		mul bh
 0216  32 FF		     1		xor bh,bh
 0218  D0 E3		     1		shl bl,1
 021A  03 C3		     1		add ax,bx
 021C  56		     1		push si
 021D  8B F0		     1		mov si,ax
 021F  D1 E6		     1		shl si,1
 0221  26: 88 14	     1		mov es:[si],dl
 0224  26: 88 74 01	     1		mov es:[si+1],dh
 0228  26: 88 54 02	     1		mov es:[si+2],dl
 022C  26: 88 74 03	     1		mov es:[si+3],dh
 0230  5E		     1		pop si
					
 0231  58				pop ax
 0232  89 05				mov ds:[di],ax
 0234  B2 20				mov dl,' '
 0236  B6 44				mov dh,44h
 0238  8B 1D				mov bx,ds:[di]
					print dl,dh
 023A  B0 50		     1		mov al,80
 023C  F6 E7		     1		mul bh
 023E  32 FF		     1		xor bh,bh
 0240  D0 E3		     1		shl bl,1
 0242  03 C3		     1		add ax,bx
 0244  56		     1		push si
 0245  8B F0		     1		mov si,ax
 0247  D1 E6		     1		shl si,1
 0249  26: 88 14	     1		mov es:[si],dl
 024C  26: 88 74 01	     1		mov es:[si+1],dh
 0250  26: 88 54 02	     1		mov es:[si+2],dl
 0254  26: 88 74 03	     1		mov es:[si+3],dh
 0258  5E		     1		pop si

 0259				gameend:
 0259  5F			 	 pop di
 025A  5E				 pop si
 025B  5A				 pop dx
 025C  59				 pop cx
 025D  5B				 pop bx
 025E  58				 pop ax
 025F  C3				ret
 0260				movesnake endp

 0260				delay proc near
 0260				delayed_one_second:
 0260  50				push ax
 0261  1E				push ds
 0262  56				push si
 0263  51				push cx
					 
 0264  B8 0000				mov ax,0
 0267  8E D8				mov ds,ax
 0269  BE 046C				mov si,46ch
 026C  AD				lodsw
					;设置时延
 026D  83 C0 01				add ax,1
 0270  8B C8				mov cx,ax
 0272					_delayed_one_second:
 0272  BE 046C				mov si,46ch
 0275  AD				lodsw
 0276  3B C1				cmp ax,cx
 0278  73 02				jnb _delayed_over
 027A  EB F6				jmp _delayed_one_second
					 
 027C					_delayed_over:
 027C  59				pop cx
 027D  5E				pop si
 027E  1F				pop ds
 027F  58				pop ax
 0280  C3				ret
 0281				delay endp

				end start





Microsoft (R) Macro Assembler Version 6.11		    06/24/20 22:55:13
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

clearScreen  . . . . . . . . . .	Proc
printBody  . . . . . . . . . . .	Proc
printone . . . . . . . . . . . .	Proc
print  . . . . . . . . . . . . .	Proc
setColBackground . . . . . . . .	Proc
setRowBackground . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 032C	  Word	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	16 Bit	 0281	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

delay  . . . . . . . . . . . . .	P Near	 0260	  _TEXT	Length= 0021 Public
  delayed_one_second . . . . . .	L Near	 0260	  _TEXT	
  _delayed_one_second  . . . . .	L Near	 0272	  _TEXT	
  _delayed_over  . . . . . . . .	L Near	 027C	  _TEXT	
initSnake  . . . . . . . . . . .	P Near	 012F	  _TEXT	Length= 004C Public
  init . . . . . . . . . . . . .	L Near	 0138	  _TEXT	
  initBody . . . . . . . . . . .	L Near	 0144	  _TEXT	
  printSnake . . . . . . . . . .	L Near	 0147	  _TEXT	
main . . . . . . . . . . . . . .	P Far	 0000	  _TEXT	Length= 00D1 Public
  drawRow  . . . . . . . . . . .	L Near	 001C	  _TEXT	
  drawCol  . . . . . . . . . . .	L Near	 0072	  _TEXT	
  l0 . . . . . . . . . . . . . .	L Near	 00C9	  _TEXT	
movesnake  . . . . . . . . . . .	P Near	 017B	  _TEXT	Length= 00E5 Public
  move_r . . . . . . . . . . . .	L Near	 0190	  _TEXT	
  judgePlug  . . . . . . . . . .	L Near	 0196	  _TEXT	
  s0 . . . . . . . . . . . . . .	L Near	 01C1	  _TEXT	
  update . . . . . . . . . . . .	L Near	 01D0	  _TEXT	
  s5 . . . . . . . . . . . . . .	L Near	 0202	  _TEXT	
  gameend  . . . . . . . . . . .	L Near	 0259	  _TEXT	
showScore  . . . . . . . . . . .	P Near	 00D1	  _TEXT	Length= 005E Public
  setColorForScore . . . . . . .	L Near	 00DF	  _TEXT	
  setScoreFont . . . . . . . . .	L Near	 00E7	  _TEXT	
  setScore . . . . . . . . . . .	L Near	 010B	  _TEXT	
  lset . . . . . . . . . . . . .	L Near	 0119	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0011h	 
down . . . . . . . . . . . . . .	Number	 5000h	 
food_position  . . . . . . . . .	Word	 0322	  _DATA	
gameover . . . . . . . . . . . .	Word	 032A	  _DATA	
greenplus  . . . . . . . . . . .	Number	 0033h	 
grren  . . . . . . . . . . . . .	Number	 0033h	 
jblink . . . . . . . . . . . . .	Word	 0328	  _DATA	
left . . . . . . . . . . . . . .	Number	 4B00h	 
nscore . . . . . . . . . . . . .	Number	 0019h	 
pink . . . . . . . . . . . . . .	Number	 0055h	 
red  . . . . . . . . . . . . . .	Number	 0044h	 
right  . . . . . . . . . . . . .	Number	 4D00h	 
score_position . . . . . . . . .	Number	 001Ah	 
score  . . . . . . . . . . . . .	Word	 0326	  _DATA	
snake_body . . . . . . . . . . .	Word	 0002	  _DATA	
snake_direction  . . . . . . . .	Word	 0000	  _DATA	
snake_length . . . . . . . . . .	Word	 0324	  _DATA	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
up . . . . . . . . . . . . . . .	Number	 4800h	 
white  . . . . . . . . . . . . .	Number	 0077h	 
yellow . . . . . . . . . . . . .	Number	 0066h	 

	   0 Warnings
	   0 Errors
